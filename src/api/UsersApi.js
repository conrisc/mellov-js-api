/*
 * What API
 * Mellov JS API
 *
 * OpenAPI spec version: 1.2.2
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.22
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NoteItem', 'model/SongItem', 'model/TagItem', 'model/YtVideoItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/NoteItem'), require('../model/SongItem'), require('../model/TagItem'), require('../model/YtVideoItem'));
  } else {
    // Browser globals (root is window)
    if (!root.WhatApi) {
      root.WhatApi = {};
    }
    root.WhatApi.UsersApi = factory(root.WhatApi.ApiClient, root.WhatApi.NoteItem, root.WhatApi.SongItem, root.WhatApi.TagItem, root.WhatApi.YtVideoItem);
  }
}(this, function(ApiClient, NoteItem, SongItem, TagItem, YtVideoItem) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version 1.2.2
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addNote operation.
     * @callback module:api/UsersApi~addNoteCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a note item
     * Adds an item to the database
     * @param {Object} opts Optional parameters
     * @param {module:model/NoteItem} opts.noteItem Note item to add
     * @param {module:api/UsersApi~addNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.addNote = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['noteItem'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/note', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addSong operation.
     * @callback module:api/UsersApi~addSongCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a song item
     * Adds an item to the database
     * @param {Object} opts Optional parameters
     * @param {module:model/SongItem} opts.songItem Song item to add
     * @param {module:api/UsersApi~addSongCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.addSong = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['songItem'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/song', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addTag operation.
     * @callback module:api/UsersApi~addTagCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds a tag item
     * Adds an item to the database
     * @param {Object} opts Optional parameters
     * @param {module:model/TagItem} opts.tagItem Tag item to add
     * @param {module:api/UsersApi~addTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.addTag = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['tagItem'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['text/plain'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/tag', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getYtItems operation.
     * @callback module:api/UsersApi~getYtItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/YtVideoItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data
     * By passing in url, you can fetch data 
     * @param {String} title title to search
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit maximum number of records to return (default to 5)
     * @param {module:api/UsersApi~getYtItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/YtVideoItem>}
     */
    this.getYtItems = function(title, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling getYtItems");
      }


      var pathParams = {
      };
      var queryParams = {
        'title': title,
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeader'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [YtVideoItem];

      return this.apiClient.callApi(
        '/ytitems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNote operation.
     * @callback module:api/UsersApi~removeNoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removes a note item
     * Removes an item from the database
     * @param {String} id note id
     * @param {module:api/UsersApi~removeNoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeNote = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeNote");
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeader'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/note', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeSong operation.
     * @callback module:api/UsersApi~removeSongCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removes a song item
     * Removes an item from the database
     * @param {String} id song id
     * @param {module:api/UsersApi~removeSongCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeSong = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeSong");
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeader'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/song', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTag operation.
     * @callback module:api/UsersApi~removeTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removes a song item
     * Removes an item from the database
     * @param {String} id tag id
     * @param {module:api/UsersApi~removeTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeTag = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeTag");
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeader'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/tag', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchNote operation.
     * @callback module:api/UsersApi~searchNoteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NoteItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches note
     * By passing in the appropriate options, you can search for available note in the system 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id note id
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/UsersApi~searchNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NoteItem>}
     */
    this.searchNote = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'skip': opts['skip'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeader'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [NoteItem];

      return this.apiClient.callApi(
        '/note', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSong operation.
     * @callback module:api/UsersApi~searchSongCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SongItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search song
     * By passing in the appropriate options, you can search for available song in the system 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id song id
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {String} opts.title a phrase song's title must contain
     * @param {Array.<String>} opts.tags tags which song must contain
     * @param {String} opts.sort type of sort to use
     * @param {module:api/UsersApi~searchSongCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SongItem>}
     */
    this.searchSong = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'skip': opts['skip'],
        'limit': opts['limit'],
        'title': opts['title'],
        'sort': opts['sort'],
      };
      var collectionQueryParams = {
        'tags': {
          value: opts['tags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeader'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SongItem];

      return this.apiClient.callApi(
        '/song', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTag operation.
     * @callback module:api/UsersApi~searchTagCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search tag
     * By passing in the appropriate options, you can search for available tag in the system 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id tag id
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/UsersApi~searchTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagItem>}
     */
    this.searchTag = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
        'skip': opts['skip'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeader'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [TagItem];

      return this.apiClient.callApi(
        '/tag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNote operation.
     * @callback module:api/UsersApi~updateNoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates a note item
     * Updates an item in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/NoteItem} opts.noteItem Note item to update
     * @param {module:api/UsersApi~updateNoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateNote = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['noteItem'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeader'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/note', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSong operation.
     * @callback module:api/UsersApi~updateSongCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates a song item
     * Updates an item in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/SongItem} opts.songItem Note item to update
     * @param {module:api/UsersApi~updateSongCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongItem}
     */
    this.updateSong = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['songItem'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeader'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = SongItem;

      return this.apiClient.callApi(
        '/song', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTag operation.
     * @callback module:api/UsersApi~updateTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates a tag item
     * Updates an item in the database
     * @param {Object} opts Optional parameters
     * @param {module:model/TagItem} opts.tagItem Note item to update
     * @param {module:api/UsersApi~updateTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateTag = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['tagItem'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationHeader'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/tag', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
